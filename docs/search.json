[
  {
    "objectID": "homework 8.html",
    "href": "homework 8.html",
    "title": "ST558 Homework 8",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntemp_data &lt;- read_csv(\"SeoulBikeData.csv\", col_names = TRUE, locale = locale(encoding=\"latin1\"))\n\nRows: 8760 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "homework 8.html#reading-in-the-data",
    "href": "homework 8.html#reading-in-the-data",
    "title": "ST558 Homework 8",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntemp_data &lt;- read_csv(\"SeoulBikeData.csv\", col_names = TRUE, locale = locale(encoding=\"latin1\"))\n\nRows: 8760 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "homework 8.html#checking-the-data",
    "href": "homework 8.html#checking-the-data",
    "title": "ST558 Homework 8",
    "section": "Checking the Data",
    "text": "Checking the Data\n\nstr(temp_data)  # checking column types\nsummary(temp_data)  # checking summary stats on numeric columns\n\n## checking categorical variable values except date\nunique(temp_data$Seasons)\nunique(temp_data$Holiday)\nunique(temp_data$`Functioning Day`)\n\n\nbike_data &lt;- temp_data |&gt;\n  drop_na() |&gt;  # removes any rows with missing values (there are none)\n  mutate(Date = dmy(Date)) |&gt;  # converts date column to date variable\n  mutate(across(where(is.character), as.factor))  # converts all other character columns into factors\n\n## renaming all variables\nbike_names &lt;- c(\"date\", \"count\", \"hour\", \"temp\", \"humidity\", \"windspeed\", \"visibility\", \"dewpoint\", \"radiation\", \"rainfall\",\n                \"snowfall\", \"season\", \"holiday\", \"funcday\")\n\nnames(bike_data) &lt;- bike_names\n\n\n## creating summary statistics\nbike_data |&gt;\n  group_by(season, holiday, funcday) |&gt;\n  summarize(mean = mean(count, na.rm = TRUE), \n                 sd = sd(count, na.rm = TRUE))\n\n`summarise()` has grouped output by 'season', 'holiday'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 11 × 5\n# Groups:   season, holiday [8]\n   season holiday    funcday  mean    sd\n   &lt;fct&gt;  &lt;fct&gt;      &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Autumn Holiday    No         0     0 \n 2 Autumn Holiday    Yes      948.  603.\n 3 Autumn No Holiday No         0     0 \n 4 Autumn No Holiday Yes      923.  618.\n 5 Spring Holiday    Yes      635.  609.\n 6 Spring No Holiday No         0     0 \n 7 Spring No Holiday Yes      750.  619.\n 8 Summer Holiday    Yes     1022.  564.\n 9 Summer No Holiday Yes     1034.  693.\n10 Winter Holiday    Yes      157.  108.\n11 Winter No Holiday Yes      232.  152.\n\n## count is 0 when funcday = No, removing from data\nbike_data &lt;- bike_data |&gt;\n  filter(funcday != \"No\")\n\n\n## final summary\nsum_data &lt;- bike_data |&gt;\n  group_by(date, season, holiday) |&gt;\n  summarize(count = sum(count, na.rm = TRUE),\n            rainfall = sum(rainfall, na.rm = TRUE),\n            snowfall = sum(snowfall, na.rm = TRUE),\n            across(where(is.numeric) & !c(count, hour), mean, na.rm = TRUE)\n            )\n\nWarning: There was 1 warning in `summarize()`.\nℹ In argument: `across(where(is.numeric) & !c(count, hour), mean, na.rm =\n  TRUE)`.\nℹ In group 1: `date = 2017-12-01`, `season = Winter`, `holiday = No Holiday`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\n`summarise()` has grouped output by 'date', 'season'. You can override using\nthe `.groups` argument.\n\nsum_data\n\n# A tibble: 353 × 12\n# Groups:   date, season [353]\n   date       season holiday  count rainfall snowfall    temp humidity windspeed\n   &lt;date&gt;     &lt;fct&gt;  &lt;fct&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 2017-12-01 Winter No Holi…  9539      0        0   -2.45       45.9     1.54 \n 2 2017-12-02 Winter No Holi…  8523      0        0    1.32       62.0     1.71 \n 3 2017-12-03 Winter No Holi…  7222      4        0    4.88       81.5     1.61 \n 4 2017-12-04 Winter No Holi…  8729      0.1      0   -0.304      52.5     3.45 \n 5 2017-12-05 Winter No Holi…  8307      0        0   -4.46       36.4     1.11 \n 6 2017-12-06 Winter No Holi…  6669      1.3      8.6  0.0458     70.8     0.696\n 7 2017-12-07 Winter No Holi…  8549      0       10.4  1.09       67.5     1.69 \n 8 2017-12-08 Winter No Holi…  8032      0        0   -3.82       41.8     1.85 \n 9 2017-12-09 Winter No Holi…  7233      0        0   -0.846      46       1.08 \n10 2017-12-10 Winter No Holi…  3453      4.1     32.5  1.19       69.7     2.00 \n# ℹ 343 more rows\n# ℹ 3 more variables: visibility &lt;dbl&gt;, dewpoint &lt;dbl&gt;, radiation &lt;dbl&gt;\n\n\n\n## recreating summary stats on new data\nsum_data |&gt;\n  group_by(season, holiday) |&gt;\n  summarize(across(where(is.numeric),\n                   list(\"mean\" = ~ mean(.x, na.rm = TRUE), \"sd\" = ~ sd(.x, na.rm = TRUE)),\n                   .names = \"{.fn}_{.col}\"))\n\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 20\n# Groups:   season [4]\n  season holiday    mean_count sd_count mean_rainfall sd_rainfall mean_snowfall\n  &lt;fct&gt;  &lt;fct&gt;           &lt;dbl&gt;    &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n1 Autumn Holiday        22754.    5642.         0           0              0   \n2 Autumn No Holiday     22065.    6792.         2.96        8.81           1.60\n3 Spring Holiday        15247.   10917.         3.83        4.65           0   \n4 Spring No Holiday     18002.    8322.         4.51       12.9            0   \n5 Summer Holiday        24532.    8438.         0.5         0.707          0   \n6 Summer No Holiday     24824.    7324.         6.21       17.2            0   \n7 Winter Holiday         3759     1561.         2.65        7.02           2.75\n8 Winter No Holiday      5574.    1757.         0.606       2.68           6.25\n# ℹ 13 more variables: sd_snowfall &lt;dbl&gt;, mean_temp &lt;dbl&gt;, sd_temp &lt;dbl&gt;,\n#   mean_humidity &lt;dbl&gt;, sd_humidity &lt;dbl&gt;, mean_windspeed &lt;dbl&gt;,\n#   sd_windspeed &lt;dbl&gt;, mean_visibility &lt;dbl&gt;, sd_visibility &lt;dbl&gt;,\n#   mean_dewpoint &lt;dbl&gt;, sd_dewpoint &lt;dbl&gt;, mean_radiation &lt;dbl&gt;,\n#   sd_radiation &lt;dbl&gt;\n\n\n\n## basic plots\nggplot(sum_data, aes(x = count, fill = season)) +\n  geom_boxplot() +\n  labs(x = \"Number of Bikes Rented\", fill = \"Season\")\n\n\n\n\n\n\n\nggplot(sum_data, aes(x = count, y = temp)) +\n  geom_point() +\n  labs(x = \"Number of Bikes Rented\", y = \"Temperature(°C)\") +\n  geom_jitter(width = 0.2, alpha = 0.3)\n\n\n\n\n\n\n\nggplot(sum_data, aes(x = date, y = count)) +\n  geom_line() +\n  labs(x = \"Date\", y = \"Number of Bikes Rented\")\n\n\n\n\n\n\n\n\n\n## correlation between numerical variables\nsum_data |&gt;\n  ungroup() |&gt;\n  select(where(is.numeric)) |&gt;\n  cor()\n\n                 count    rainfall    snowfall         temp    humidity\ncount       1.00000000 -0.23910905 -0.26529110  0.753076732  0.03588697\nrainfall   -0.23910905  1.00000000 -0.02313404  0.144517274  0.52864263\nsnowfall   -0.26529110 -0.02313404  1.00000000 -0.266963662  0.06539191\ntemp        0.75307673  0.14451727 -0.26696366  1.000000000  0.40416749\nhumidity    0.03588697  0.52864263  0.06539191  0.404167486  1.00000000\nwindspeed  -0.19288142 -0.10167578  0.02088156 -0.260721792 -0.23425778\nvisibility  0.16599375 -0.22199387 -0.10188902  0.002336683 -0.55917733\ndewpoint    0.65047655  0.26456621 -0.20955286  0.962796255  0.63204729\nradiation   0.73589290 -0.32270413 -0.23343056  0.550274301 -0.27444967\n             windspeed   visibility   dewpoint   radiation\ncount      -0.19288142  0.165993749  0.6504765  0.73589290\nrainfall   -0.10167578 -0.221993866  0.2645662 -0.32270413\nsnowfall    0.02088156 -0.101889019 -0.2095529 -0.23343056\ntemp       -0.26072179  0.002336683  0.9627963  0.55027430\nhumidity   -0.23425778 -0.559177334  0.6320473 -0.27444967\nwindspeed   1.00000000  0.206022636 -0.2877032  0.09612635\nvisibility  0.20602264  1.000000000 -0.1535516  0.27139591\ndewpoint   -0.28770322 -0.153551591  1.0000000  0.38315713\nradiation   0.09612635  0.271395906  0.3831571  1.00000000"
  },
  {
    "objectID": "homework 8.html#split-the-data",
    "href": "homework 8.html#split-the-data",
    "title": "ST558 Homework 8",
    "section": "Split the Data",
    "text": "Split the Data\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.4.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n\n\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n\n\nWarning: package 'dials' was built under R version 4.4.2\n\n\nWarning: package 'infer' was built under R version 4.4.2\n\n\nWarning: package 'modeldata' was built under R version 4.4.2\n\n\nWarning: package 'parsnip' was built under R version 4.4.2\n\n\nWarning: package 'recipes' was built under R version 4.4.2\n\n\nWarning: package 'rsample' was built under R version 4.4.2\n\n\nWarning: package 'tune' was built under R version 4.4.2\n\n\nWarning: package 'workflows' was built under R version 4.4.2\n\n\nWarning: package 'workflowsets' was built under R version 4.4.2\n\n\nWarning: package 'yardstick' was built under R version 4.4.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\nbike_split &lt;- initial_split(sum_data, 0.75)\nbike_train &lt;- training(bike_split)\nbike_test &lt;- testing(bike_split)\n\n\nbike_10_fold &lt;- vfold_cv(bike_train, 10)"
  },
  {
    "objectID": "homework 8.html#fitting-mlr-models",
    "href": "homework 8.html#fitting-mlr-models",
    "title": "ST558 Homework 8",
    "section": "Fitting MLR Models",
    "text": "Fitting MLR Models\n\n## first recipe\nbike_rec_1 &lt;- \n  recipe(count ~ ., data = sum_data) |&gt;\n  update_role(date, new_role = \"ID\") |&gt;\n  step_date(date, features = \"dow\") |&gt;\n  step_mutate(day_type = factor(if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"weekend\", \"weekday\"))) |&gt;\n  step_rm(date_dow) |&gt;\n  step_normalize(all_numeric(), -all_outcomes()) |&gt;\n  step_dummy(season, holiday, day_type)\n\n\n## second recipe\nbike_rec_2 &lt;- \n  recipe(count ~ ., data = sum_data) |&gt;\n  update_role(date, new_role = \"ID\") |&gt;\n  step_date(date, features = \"dow\") |&gt;\n  step_mutate(day_type = factor(if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"weekend\", \"weekday\"))) |&gt;\n  step_rm(date_dow) |&gt;\n  step_normalize(all_numeric(), -all_outcomes()) |&gt;\n  step_dummy(season, holiday, day_type) |&gt;\n  step_interact(terms = ~starts_with(\"season\")*starts_with(\"holiday\") + temp*rainfall) |&gt;\n  step_interact(terms = ~season_Spring*temp + season_Winter*temp) |&gt;\n  step_interact(terms = ~season_Summer*temp)\n\n\n## third recipe\nbike_rec_3 &lt;- \n  recipe(count ~ ., data = sum_data) |&gt;\n  update_role(date, new_role = \"ID\") |&gt;\n  step_date(date, features = \"dow\") |&gt;\n  step_mutate(day_type = factor(if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"weekend\", \"weekday\"))) |&gt;\n  step_rm(date_dow) |&gt;\n  step_normalize(all_numeric(), -all_outcomes()) |&gt;\n  step_dummy(season, holiday, day_type) |&gt;\n  step_interact(terms = ~starts_with(\"season\")*starts_with(\"holiday\") + temp*rainfall) |&gt;\n  step_interact(terms = ~season_Spring*temp + season_Winter*temp) |&gt;\n  step_interact(terms = ~season_Summer*temp) |&gt;\n  step_poly(rainfall, snowfall, temp, humidity, windspeed, visibility, dewpoint, radiation, degree = 2)\n\n\n## fitting the models\nbike_mod &lt;- linear_reg() |&gt;\n  set_engine(\"lm\")\n\nbike_wfl_1 &lt;- workflow() |&gt;\n  add_recipe(bike_rec_1) |&gt;\n  add_model(bike_mod)\n\nbike_wfl_2 &lt;- workflow() |&gt;\n  add_recipe(bike_rec_2) |&gt;\n  add_model(bike_mod)\n\nbike_wfl_3 &lt;- workflow() |&gt;\n  add_recipe(bike_rec_3) |&gt;\n  add_model(bike_mod)\n\n\nbike_cv_fits_1 &lt;- bike_wfl_1 |&gt;\n  fit_resamples(bike_10_fold)\n\nbike_cv_fits_2 &lt;- bike_wfl_2 |&gt;\n  fit_resamples(bike_10_fold)\n\nbike_cv_fits_3 &lt;- bike_wfl_3 |&gt;\n  fit_resamples(bike_10_fold)\n\ncollect_metrics(bike_cv_fits_1)\n\n# A tibble: 2 × 6\n  .metric .estimator     mean     n  std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   4077.       10 215.     Preprocessor1_Model1\n2 rsq     standard      0.848    10   0.0130 Preprocessor1_Model1\n\ncollect_metrics(bike_cv_fits_2)\n\n# A tibble: 2 × 6\n  .metric .estimator     mean     n  std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   2858.       10 240.     Preprocessor1_Model1\n2 rsq     standard      0.917    10   0.0154 Preprocessor1_Model1\n\ncollect_metrics(bike_cv_fits_3)  # lowest RMSE\n\n# A tibble: 2 × 6\n  .metric .estimator     mean     n  std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   2733.       10 209.     Preprocessor1_Model1\n2 rsq     standard      0.926    10   0.0112 Preprocessor1_Model1\n\n\n\n## fitting best model to entire training data set\nbest_fit  &lt;- last_fit(bike_wfl_3, bike_split)\ncollect_metrics(best_fit)\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    3423.    Preprocessor1_Model1\n2 rsq     standard       0.877 Preprocessor1_Model1\n\nbest_fit |&gt;\n  extract_fit_parsnip() |&gt;\n  tidy()\n\n# A tibble: 29 × 5\n   term                               estimate std.error statistic  p.value\n   &lt;chr&gt;                                 &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)                          13428.     1699.     7.91  1.03e-13\n 2 season_Spring                          872.     2229.     0.391 6.96e- 1\n 3 season_Summer                        21746.     3024.     7.19  8.48e-12\n 4 season_Winter                        -4155.     2484.    -1.67  9.57e- 2\n 5 holiday_No.Holiday                    7979.     1567.     5.09  7.33e- 7\n 6 day_type_weekend                     -2576.      357.    -7.21  7.52e-12\n 7 season_Spring_x_holiday_No.Holiday   -5036.     2271.    -2.22  2.75e- 2\n 8 season_Summer_x_holiday_No.Holiday   -3851.     2413.    -1.60  1.12e- 1\n 9 season_Winter_x_holiday_No.Holiday   -6361.     1883.    -3.38  8.56e- 4\n10 temp_x_rainfall                      -1662.      573.    -2.90  4.10e- 3\n# ℹ 19 more rows"
  }
]